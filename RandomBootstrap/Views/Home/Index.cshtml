@model RandomBootstrap.Models.RandomViewModel

@{
    ViewData["Title"] = "Theme #" + Model.Seed;
}

@section Styles
{
    <link rel="stylesheet" href="@Url.Action("Bootstrap", "Home", new {Model.Seed})" />
}

@{
    var random = new Random();
}

<h2>custom.scss</h2>
<p>Place the following code in <code>_custom.scss</code> and use a tool like libsass to generate your custom bootstrap theme.</p>
<pre><code class="scss">@Html.Raw(Model.Content)</code></pre>
<div>
    <button class="btn btn-primary btn-copy-it">Copy Content</button> or <a class="btn btn-info" href="@Url.Action("Index", "Home", new {Seed = random.Next() })">Get a new one</a>
</div>
<h2>How it Works</h2>
<ul>
    <li>We store a list of font pairings from <a href="http://fontpair.co/">FontPair.co</a>. These make up the heading and body fonts.</li>
    <li>We pick a either a light or a dark color as the navbar color.
        <ul>
            <li>If we pick a dark color then this color is used as the primary color for the site.</li>
            <li>If we pick a light color then we pick a dark shade of that color as the primary color for the site.</li>
            <li>A harmonious color is picked as the secondary color.</li>
        </ul>
    </li>
    <li>We then tweak some settings to try and differentiate things a bit more:
        <ul>
            <li>Randomize whether elements have shadows, gradients and rounded edges.</li>
            <li>Tweaks the border-radius for round items between .20, .25 and .30rem.</li>
            <li>Picks a new base font for the site between 14px, 15px and 16px.</li>
            <li>Tries and make the navbar looks different than the default by adjusting the verticle padding plus optionally adding a bottom bar and a shadow.</li>
        </ul>
    </li>
</ul>

<h2>How it doesn't work</h2>
<ul>
    <li>This isn't a bootstrap theme builder. It just throws together something random that should look ok for demo site when you don't want it to look like stock bootstrap.</li>
    <li>This doesn't produce the CSS for ya. You'll need to copy and paste the SCSS above and generate that as part of your build process.</li>
    <li>We only pick two colors, a primary and a secondary. The standard green, teal, yellow and red for buttons kind of prevents us from using those colors as our primary theme if we are married to them. This uses the same secondary color for all of them and moves on with life.</li>
</ul>

<h2 contenteditable="true">My Editable Heading</h2>
<div contenteditable="true">
    <p><strong>Nullam invidunt mel te</strong>, an usu tale tritani placerat. Pro cu cibo nulla consequat, in soleat diceret mandamus vim. Ad eum pertinacia sadipscing, iusto recteque eam et, eu nec adipisci rationibus. Ut nam meliore denique splendide.</p>
    <p>Eu munere perpetua mel, <em>sit integre persius at</em>. Dicit bonorum invidunt vim te, tritani delenit vis cu. Usu eu vidit tamquam electram. Per altera tamquam alterum an, ne has prima atqui ponderum. Ius novum nihil feugiat eu. An per graeci invidunt rationibus.</p>
    <p>Ea cum liber decore facilisis. Quo ex quot audire, ne tale diceret detracto vis, eam ei viderer definitiones. Vim id tantas altera. Diceret electram ius cu. Mel at diam veri aliquam, eam quas possim cu. Elit pertinax sapientem sed ne, vim voluptaria necessitatibus et.</p>
</div>

<h2>Some Buttons</h2>
<div>
    <button type="button" class="btn btn-primary">Primary</button>
    <button type="button" class="btn btn-secondary">Secondary</button>
    <button type="button" class="btn btn-success">Success</button>
    <button type="button" class="btn btn-info">Info</button>
    <button type="button" class="btn btn-warning">Warning</button>
    <button type="button" class="btn btn-danger">Danger</button>
    <button type="button" class="btn btn-link">Link</button>
</div>

<h2>Table Example</h2>
<table class="table">
    <thead>
    <tr>
        <th>#</th>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Username</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <th scope="row">1</th>
        <td>Mark</td>
        <td>Otto</td>
        <td>@@mdo</td>
    </tr>
    <tr>
        <th scope="row">2</th>
        <td>Jacob</td>
        <td>Thornton</td>
        <td>@@fat</td>
    </tr>
    <tr>
        <th scope="row">3</th>
        <td>Larry</td>
        <td>the Bird</td>
        <td>@@twitter</td>
    </tr>
    </tbody>
</table>

<h2>Badges</h2>
<div>
    <span class="badge badge-default">Default</span>
    <span class="badge badge-primary">Primary</span>
    <span class="badge badge-success">Success</span>
    <span class="badge badge-info">Info</span>
    <span class="badge badge-warning">Warning</span>
    <span class="badge badge-danger">Danger</span>
</div>

<h2>Popovers</h2>
<div class="static-popover">
    <div class="popover popover-top">
        <h3 class="popover-title">Popover top</h3>
        <div class="popover-content">
            <p>Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.</p>
        </div>
    </div>

    <div class="popover popover-right">
        <h3 class="popover-title">Popover right</h3>
        <div class="popover-content">
            <p>Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.</p>
        </div>
    </div>

    <div class="popover popover-bottom">
        <h3 class="popover-title">Popover bottom</h3>

        <div class="popover-content">
            <p>Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.</p>
        </div>
    </div>

    <div class="popover popover-left">
        <h3 class="popover-title">Popover left</h3>
        <div class="popover-content">
            <p>Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.</p>
        </div>
    </div>

    <div class="clearfix"></div>
</div>

@section Scripts
{
    <script>
        // copy code, well, copied from here - http://stackoverflow.com/questions/400212/how-do-i-copy-to-the-clipboard-in-javascript
        var copyTextareaBtn = document.querySelector('.btn-copy-it');

        copyTextareaBtn.addEventListener('click', function(event) {
            var textArea = document.createElement("textarea");

            //
            // *** This styling is an extra step which is likely not required. ***
            //
            // Why is it here? To ensure:
            // 1. the element is able to have focus and selection.
            // 2. if element was to flash render it has minimal visual impact.
            // 3. less flakyness with selection and copying which **might** occur if
            //    the textarea element is not visible.
            //
            // The likelihood is the element won't even render, not even a flash,
            // so some of these are just precautions. However in IE the element
            // is visible whilst the popup box asking the user for permission for
            // the web page to copy to the clipboard.
            //

            // Place in top-left corner of screen regardless of scroll position.
            textArea.style.position = 'fixed';
            textArea.style.top = 0;
            textArea.style.left = 0;

            // Ensure it has a small width and height. Setting to 1px / 1em
            // doesn't work as this gives a negative w/h on some browsers.
            textArea.style.width = '2em';
            textArea.style.height = '2em';

            // We don't need padding, reducing the size if it does flash render.
            textArea.style.padding = 0;

            // Clean up any borders.
            textArea.style.border = 'none';
            textArea.style.outline = 'none';
            textArea.style.boxShadow = 'none';

            // Avoid flash of white box if rendered for any reason.
            textArea.style.background = 'transparent';

            textArea.value = document.querySelector('.scss').textContent;
            document.body.appendChild(textArea);
            textArea.select();

            try {
                var successful = document.execCommand('copy');
                var msg = successful ? 'successful' : 'unsuccessful';
                console.log('Copying text command was ' + msg);
            } catch (err) {
                console.log('Oops, unable to copy');
            }
            document.body.removeChild(textArea);

        });
    </script>
}
