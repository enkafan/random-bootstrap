@model RandomBootstrap.Models.RandomViewModel

@{
    ViewData["Title"] = "Theme #" + Model.Seed;
}

@section Styles
{
    <link rel="stylesheet" href="@Url.Action("Bootstrap", "Home", new {Model.Seed})" />
}

@{
    var random = new Random();
}

<h2>_custom.scss</h2>
<p>Place the following code in _custom.scss and use a tool like libsass to generate your custom bootstrap theme.</p>
<pre><code class="scss">@Html.Raw(Model.Content)</code></pre>
<div>
    <button class="btn btn-primary btn-copy-it">Copy Content</button> or <a class="btn btn-secondary" href="@Url.Action("Index", "Home", new {Seed = random.Next() })">Get a new one</a>
</div>
<h2 contenteditable="true">My Editable Heading</h2>
<div contenteditable="true">
    <p><strong>Nullam invidunt mel te</strong>, an usu tale tritani placerat. Pro cu cibo nulla consequat, in soleat diceret mandamus vim. Ad eum pertinacia sadipscing, iusto recteque eam et, eu nec adipisci rationibus. Ut nam meliore denique splendide.</p>
    <p>Eu munere perpetua mel, <em>sit integre persius at</em>. Dicit bonorum invidunt vim te, tritani delenit vis cu. Usu eu vidit tamquam electram. Per altera tamquam alterum an, ne has prima atqui ponderum. Ius novum nihil feugiat eu. An per graeci invidunt rationibus.</p>
    <p>Ea cum liber decore facilisis. Quo ex quot audire, ne tale diceret detracto vis, eam ei viderer definitiones. Vim id tantas altera. Diceret electram ius cu. Mel at diam veri aliquam, eam quas possim cu. Elit pertinax sapientem sed ne, vim voluptaria necessitatibus et.</p>
</div>

<h2>Some Buttons</h2>
<div>
    <button type="button" class="btn btn-primary">Primary</button>
    <button type="button" class="btn btn-secondary">Secondary</button>
    <button type="button" class="btn btn-success">Success</button>
    <button type="button" class="btn btn-info">Info</button>
    <button type="button" class="btn btn-warning">Warning</button>
    <button type="button" class="btn btn-danger">Danger</button>
    <button type="button" class="btn btn-link">Link</button>
</div>

<h2>Table Time</h2>
<table class="table">
    <thead>
    <tr>
        <th>#</th>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Username</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <th scope="row">1</th>
        <td>Mark</td>
        <td>Otto</td>
        <td>@@mdo</td>
    </tr>
    <tr>
        <th scope="row">2</th>
        <td>Jacob</td>
        <td>Thornton</td>
        <td>@@fat</td>
    </tr>
    <tr>
        <th scope="row">3</th>
        <td>Larry</td>
        <td>the Bird</td>
        <td>@@twitter</td>
    </tr>
    </tbody>
</table>

<h2>Some Badges</h2>
<div>
    <span class="badge badge-default">Default</span>
    <span class="badge badge-primary">Primary</span>
    <span class="badge badge-success">Success</span>
    <span class="badge badge-info">Info</span>
    <span class="badge badge-warning">Warning</span>
    <span class="badge badge-danger">Danger</span>
</div>

<h2>A form</h2>
<form>
    <div class="form-group row">
        <label for="inputEmail3" class="col-sm-2 col-form-label">Email</label>
        <div class="col-sm-10">
            <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
        </div>
    </div>
    <div class="form-group row">
        <label for="inputPhone3" class="col-sm-2 col-form-label">Telephone</label>
        <div class="col-sm-10">
            <input type="tel" class="form-control" id="inputPhone3" placeholder="Telephone">
        </div>
    </div>
    <fieldset class="form-group row">
        <legend class="col-form-legend col-sm-2">Radios</legend>
        <div class="col-sm-10">
            <div class="form-check">
                <label class="form-check-label">
                    <input class="form-check-input" type="radio" name="gridRadios" id="gridRadios1" value="option1" checked>
                    Option one is this and that&mdash;be sure to include why it's great
                </label>
            </div>
            <div class="form-check">
                <label class="form-check-label">
                    <input class="form-check-input" type="radio" name="gridRadios" id="gridRadios2" value="option2">
                    Option two can be something else and selecting it will deselect option one
                </label>
            </div>
            <div class="form-check disabled">
                <label class="form-check-label">
                    <input class="form-check-input" type="radio" name="gridRadios" id="gridRadios3" value="option3" disabled>
                    Option three is disabled
                </label>
            </div>
        </div>
    </fieldset>
    <div class="form-group row">
        <label class="col-sm-2">Checkbox</label>
        <div class="col-sm-10">
            <div class="form-check">
                <label class="form-check-label">
                    <input class="form-check-input" type="checkbox"> Check me out
                </label>
            </div>
        </div>
    </div>
    <div class="form-group row">
        <div class="offset-sm-2 col-sm-10">
            <button type="submit" class="btn btn-primary">Sign in</button>
        </div>
    </div>
</form>

@section Scripts
{
    <script>
        var copyTextareaBtn = document.querySelector('.btn-copy-it');

        copyTextareaBtn.addEventListener('click', function(event) {
            var textArea = document.createElement("textarea");

            //
            // *** This styling is an extra step which is likely not required. ***
            //
            // Why is it here? To ensure:
            // 1. the element is able to have focus and selection.
            // 2. if element was to flash render it has minimal visual impact.
            // 3. less flakyness with selection and copying which **might** occur if
            //    the textarea element is not visible.
            //
            // The likelihood is the element won't even render, not even a flash,
            // so some of these are just precautions. However in IE the element
            // is visible whilst the popup box asking the user for permission for
            // the web page to copy to the clipboard.
            //

            // Place in top-left corner of screen regardless of scroll position.
            textArea.style.position = 'fixed';
            textArea.style.top = 0;
            textArea.style.left = 0;

            // Ensure it has a small width and height. Setting to 1px / 1em
            // doesn't work as this gives a negative w/h on some browsers.
            textArea.style.width = '2em';
            textArea.style.height = '2em';

            // We don't need padding, reducing the size if it does flash render.
            textArea.style.padding = 0;

            // Clean up any borders.
            textArea.style.border = 'none';
            textArea.style.outline = 'none';
            textArea.style.boxShadow = 'none';

            // Avoid flash of white box if rendered for any reason.
            textArea.style.background = 'transparent';

            textArea.value = document.querySelector('.scss').textContent;
            document.body.appendChild(textArea);
            textArea.select();

            try {
                var successful = document.execCommand('copy');
                var msg = successful ? 'successful' : 'unsuccessful';
                console.log('Copying text command was ' + msg);
            } catch (err) {
                console.log('Oops, unable to copy');
            }
            document.body.removeChild(textArea);

        });
    </script>
}
